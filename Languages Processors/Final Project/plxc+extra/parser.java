
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\013\000\002\004\012\000\002\004\012\000\002" +
    "\004\011\000\002\004\012\000\002\004\015\000\002\004" +
    "\007\000\002\004\007\000\002\004\005\000\002\004\004" +
    "\000\002\007\004\000\002\007\007\000\002\007\006\000" +
    "\002\007\011\000\002\007\005\000\002\007\007\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\006" +
    "\000\002\005\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\010\000\002\005\006\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\004\000\002\011\005\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\050\004\016\006\020\007\012\010\026\011" +
    "\032\014\004\031\017\033\013\047\011\050\015\051\023" +
    "\052\027\053\031\054\007\055\033\056\025\057\005\060" +
    "\010\061\021\001\002\000\022\014\004\031\017\050\015" +
    "\052\027\053\031\055\033\057\005\060\010\001\002\000" +
    "\054\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\233\020\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\032\uffe1\034\uffe1\035\uffe1\036\232\037\231\040\uffe1" +
    "\041\uffe1\044\uffe1\001\002\000\004\057\221\001\002\000" +
    "\006\032\uffc6\057\uffc6\001\002\000\004\017\114\001\002" +
    "\000\006\032\uffc4\057\uffc4\001\002\000\004\031\215\001" +
    "\002\000\050\004\016\006\020\007\012\010\026\011\032" +
    "\014\004\031\017\033\013\047\011\050\015\051\023\052" +
    "\027\053\031\054\007\055\033\056\025\057\005\060\010" +
    "\061\021\001\002\000\014\013\041\014\042\015\044\016" +
    "\043\041\212\001\002\000\046\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\032\uffd9\034\uffd9\035\uffd9\040\uffd9" +
    "\041\uffd9\044\uffd9\001\002\000\004\031\170\001\002\000" +
    "\034\014\004\031\017\047\011\050\015\051\023\052\027" +
    "\053\031\054\007\055\033\056\025\057\005\060\010\061" +
    "\021\001\002\000\050\004\016\006\020\007\012\010\026" +
    "\011\032\014\004\031\017\033\013\047\011\050\015\051" +
    "\023\052\027\053\031\054\007\055\033\056\025\057\005" +
    "\060\010\061\021\001\002\000\006\032\uffc2\057\uffc2\001" +
    "\002\000\006\040\154\041\155\001\002\000\006\032\uffc3" +
    "\057\uffc3\001\002\000\054\002\uffff\004\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\014\uffff\031\uffff\033\uffff\034\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001\002\000\006" +
    "\032\uffc5\057\uffc5\001\002\000\004\031\137\001\002\000" +
    "\046\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\044\uffd8\001\002" +
    "\000\052\002\001\004\016\006\020\007\012\010\026\011" +
    "\032\014\004\031\017\033\013\047\011\050\015\051\023" +
    "\052\027\053\031\054\007\055\033\056\025\057\005\060" +
    "\010\061\021\001\002\000\046\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\032\uffdb\034\uffdb\035\uffdb\040\uffdb" +
    "\041\uffdb\044\uffdb\001\002\000\004\031\036\001\002\000" +
    "\046\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\032" +
    "\uffda\034\uffda\035\uffda\040\uffda\041\uffda\044\uffda\001\002" +
    "\000\004\002\035\001\002\000\004\002\000\001\002\000" +
    "\024\014\004\031\017\041\037\050\015\052\027\053\031" +
    "\055\033\057\005\060\010\001\002\000\026\014\004\022" +
    "\052\031\053\043\046\050\015\052\027\053\031\055\033" +
    "\057\005\060\050\001\002\000\014\013\041\014\042\015" +
    "\044\016\043\041\045\001\002\000\022\014\004\031\017" +
    "\050\015\052\027\053\031\055\033\057\005\060\010\001" +
    "\002\000\022\014\004\031\017\050\015\052\027\053\031" +
    "\055\033\057\005\060\010\001\002\000\022\014\004\031" +
    "\017\050\015\052\027\053\031\055\033\057\005\060\010" +
    "\001\002\000\022\014\004\031\017\050\015\052\027\053" +
    "\031\055\033\057\005\060\010\001\002\000\026\014\004" +
    "\022\052\031\053\043\046\050\015\052\027\053\031\055" +
    "\033\057\005\060\050\001\002\000\004\044\121\001\002" +
    "\000\026\013\041\014\042\015\044\016\043\020\065\021" +
    "\062\023\061\024\064\025\057\026\063\001\002\000\050" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\114\020\uffc9\021" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\032\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\044\uffc9\001" +
    "\002\000\012\027\074\030\077\041\106\044\075\001\002" +
    "\000\026\014\004\022\052\031\053\043\046\050\015\052" +
    "\027\053\031\055\033\057\005\060\050\001\002\000\040" +
    "\014\004\022\052\031\053\043\046\047\011\050\015\051" +
    "\023\052\027\053\031\054\007\055\033\056\025\057\005" +
    "\060\050\061\021\001\002\000\004\032\103\001\002\000" +
    "\012\027\074\030\077\032\076\044\075\001\002\000\030" +
    "\013\041\014\042\015\044\016\043\020\065\021\062\023" +
    "\061\024\064\025\057\026\063\032\060\001\002\000\022" +
    "\014\004\031\017\050\015\052\027\053\031\055\033\057" +
    "\005\060\010\001\002\000\046\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3\040\uffe3" +
    "\041\uffe3\044\uffe3\001\002\000\022\014\004\031\017\050" +
    "\015\052\027\053\031\055\033\057\005\060\010\001\002" +
    "\000\022\014\004\031\017\050\015\052\027\053\031\055" +
    "\033\057\005\060\010\001\002\000\022\014\004\031\017" +
    "\050\015\052\027\053\031\055\033\057\005\060\010\001" +
    "\002\000\022\014\004\031\017\050\015\052\027\053\031" +
    "\055\033\057\005\060\010\001\002\000\022\014\004\031" +
    "\017\050\015\052\027\053\031\055\033\057\005\060\010" +
    "\001\002\000\046\013\041\014\042\015\044\016\043\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\032\uffd3\034\uffd3\035\uffd3\040\uffd3\041\uffd3\044" +
    "\uffd3\001\002\000\046\013\041\014\042\015\044\016\043" +
    "\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\032\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf" +
    "\044\uffcf\001\002\000\046\013\041\014\042\015\044\016" +
    "\043\020\uffce\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\032\uffce\034\uffce\035\uffce\040\uffce\041" +
    "\uffce\044\uffce\001\002\000\046\013\041\014\042\015\044" +
    "\016\043\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\032\uffd2\034\uffd2\035\uffd2\040\uffd2" +
    "\041\uffd2\044\uffd2\001\002\000\046\013\041\014\042\015" +
    "\044\016\043\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\034\uffd1\035\uffd1\040" +
    "\uffd1\041\uffd1\044\uffd1\001\002\000\046\013\041\014\042" +
    "\015\044\016\043\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\034\uffd0\035\uffd0" +
    "\040\uffd0\041\uffd0\044\uffd0\001\002\000\026\014\004\022" +
    "\052\031\053\043\046\050\015\052\027\053\031\055\033" +
    "\057\005\060\050\001\002\000\026\014\004\022\052\031" +
    "\053\043\046\050\015\052\027\053\031\055\033\057\005" +
    "\060\050\001\002\000\046\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\032\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\044\uffca\001\002\000\026\014\004\022\052\031\053" +
    "\043\046\050\015\052\027\053\031\055\033\057\005\060" +
    "\050\001\002\000\046\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\074\030\uffcb\032\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb" +
    "\044\uffcb\001\002\000\046\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\074\030\077\032\uffc8\034\uffc8\035\uffc8\040\uffc8\041" +
    "\uffc8\044\075\001\002\000\046\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\032\uffcc\034\uffcc\035\uffcc\040\uffcc" +
    "\041\uffcc\044\uffcc\001\002\000\022\014\004\031\017\050" +
    "\015\052\027\053\031\055\033\057\005\060\010\001\002" +
    "\000\046\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\044\uffe2\001" +
    "\002\000\046\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\032\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd\044\uffcd" +
    "\001\002\000\024\014\004\031\017\032\107\050\015\052" +
    "\027\053\031\055\033\057\005\060\010\001\002\000\050" +
    "\004\016\006\020\007\012\010\026\011\032\014\004\031" +
    "\017\033\013\047\011\050\015\051\023\052\027\053\031" +
    "\054\007\055\033\056\025\057\005\060\010\061\021\001" +
    "\002\000\014\013\041\014\042\015\044\016\043\032\111" +
    "\001\002\000\050\004\016\006\020\007\012\010\026\011" +
    "\032\014\004\031\017\033\013\047\011\050\015\051\023" +
    "\052\027\053\031\054\007\055\033\056\025\057\005\060" +
    "\010\061\021\001\002\000\056\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\014\ufff8\031\ufff8\033" +
    "\ufff8\034\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001" +
    "\002\000\056\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\014\ufff6\031\ufff6\033\ufff6\034\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002\000\030\014" +
    "\004\022\052\031\053\042\115\043\116\050\015\052\027" +
    "\053\031\055\033\057\005\060\050\001\002\000\046\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\040\uffd7\041\uffd7\044\uffd7\001\002\000\046" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6" +
    "\034\uffd6\035\uffd6\040\uffd6\041\uffd6\044\121\001\002\000" +
    "\046\013\041\014\042\015\044\016\043\020\065\021\062" +
    "\023\061\024\064\025\057\026\063\027\uffd4\030\uffd4\032" +
    "\uffd4\034\uffd4\035\uffd4\040\uffd4\041\uffd4\044\uffd4\001\002" +
    "\000\046\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\074\030\077" +
    "\032\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\044\075\001" +
    "\002\000\004\042\122\001\002\000\046\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\040\uffc7\041\uffc7\044\uffc7\001\002\000\046\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\040\uffe6\041\uffe6\044\uffe6\001\002\000\046\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\040\uffe5\041\uffe5\044\uffe5\001\002\000\046\013" +
    "\uffe7\014\uffe7\015\044\016\043\020\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\034" +
    "\uffe7\035\uffe7\040\uffe7\041\uffe7\044\uffe7\001\002\000\046" +
    "\013\uffe8\014\uffe8\015\044\016\043\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8" +
    "\034\uffe8\035\uffe8\040\uffe8\041\uffe8\044\uffe8\001\002\000" +
    "\012\027\074\030\077\041\130\044\075\001\002\000\024" +
    "\014\004\031\017\032\131\050\015\052\027\053\031\055" +
    "\033\057\005\060\010\001\002\000\050\004\016\006\020" +
    "\007\012\010\026\011\032\014\004\031\017\033\013\047" +
    "\011\050\015\051\023\052\027\053\031\054\007\055\033" +
    "\056\025\057\005\060\010\061\021\001\002\000\014\013" +
    "\041\014\042\015\044\016\043\032\133\001\002\000\050" +
    "\004\016\006\020\007\012\010\026\011\032\014\004\031" +
    "\017\033\013\047\011\050\015\051\023\052\027\053\031" +
    "\054\007\055\033\056\025\057\005\060\010\061\021\001" +
    "\002\000\056\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\014\ufff7\031\ufff7\033\ufff7\034\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000\056\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\014\ufff5\031\ufff5\033\ufff5\034\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\001\002\000\054\002\ufffe\004\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\014\ufffe\031\ufffe\033\ufffe" +
    "\034\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002" +
    "\000\024\014\004\031\017\033\140\050\015\052\027\053" +
    "\031\055\033\057\005\060\010\001\002\000\022\014\004" +
    "\031\017\050\015\052\027\053\031\055\033\057\005\060" +
    "\010\001\002\000\004\032\151\001\002\000\014\013\041" +
    "\014\042\015\044\016\043\032\147\001\002\000\006\034" +
    "\145\040\144\001\002\000\022\014\004\031\017\050\015" +
    "\052\027\053\031\055\033\057\005\060\010\001\002\000" +
    "\046\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032" +
    "\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\044\uffbf\001\002" +
    "\000\016\013\041\014\042\015\044\016\043\034\uffc0\040" +
    "\uffc0\001\002\000\004\041\150\001\002\000\056\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\001\002\000\004\041\152\001\002\000\056" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\014\ufff1\031\ufff1\033\ufff1\034\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\001\002\000\016\013\041\014\042" +
    "\015\044\016\043\034\uffc1\040\uffc1\001\002\000\004\057" +
    "\156\001\002\000\056\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\014\uffef\031\uffef\033\uffef\034" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\001\002\000" +
    "\010\017\157\040\uffea\041\uffea\001\002\000\022\014\004" +
    "\031\017\050\015\052\027\053\031\055\033\057\005\060" +
    "\010\001\002\000\016\013\041\014\042\015\044\016\043" +
    "\040\uffe9\041\uffe9\001\002\000\004\007\162\001\002\000" +
    "\004\031\163\001\002\000\026\014\004\022\052\031\053" +
    "\043\046\050\015\052\027\053\031\055\033\057\005\060" +
    "\050\001\002\000\012\027\074\030\077\032\165\044\075" +
    "\001\002\000\004\041\166\001\002\000\056\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9" +
    "\031\ufff9\033\ufff9\034\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\001\002\000\014\013\041\014\042\015\044\016" +
    "\043\032\060\001\002\000\030\014\004\022\052\031\053" +
    "\043\046\045\171\050\015\052\027\053\031\055\033\057" +
    "\005\060\050\001\002\000\004\060\177\001\002\000\012" +
    "\027\074\030\077\032\173\044\075\001\002\000\050\004" +
    "\016\006\020\007\012\010\026\011\032\014\004\031\017" +
    "\033\013\047\011\050\015\051\023\052\027\053\031\054" +
    "\007\055\033\056\025\057\005\060\010\061\021\001\002" +
    "\000\056\002\ufffc\004\ufffc\005\175\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\014\ufffc\031\ufffc\033\ufffc\034\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002\000\050\004\016" +
    "\006\020\007\012\010\026\011\032\014\004\031\017\033" +
    "\013\047\011\050\015\051\023\052\027\053\031\054\007" +
    "\055\033\056\025\057\005\060\010\061\021\001\002\000" +
    "\056\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\014\ufffb\031\ufffb\033\ufffb\034\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\001\002\000\004\040\200\001" +
    "\002\000\030\014\004\022\052\031\053\043\046\045\201" +
    "\050\015\052\027\053\031\055\033\057\005\060\050\001" +
    "\002\000\004\060\205\001\002\000\012\027\074\030\077" +
    "\032\203\044\075\001\002\000\050\004\016\006\020\007" +
    "\012\010\026\011\032\014\004\031\017\033\013\047\011" +
    "\050\015\051\023\052\027\053\031\054\007\055\033\056" +
    "\025\057\005\060\010\061\021\001\002\000\056\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\014" +
    "\ufff4\031\ufff4\033\ufff4\034\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\001\002\000\004\040\206\001\002\000\026" +
    "\014\004\022\052\031\053\043\046\050\015\052\027\053" +
    "\031\055\033\057\005\060\050\001\002\000\012\027\074" +
    "\030\077\032\210\044\075\001\002\000\050\004\016\006" +
    "\020\007\012\010\026\011\032\014\004\031\017\033\013" +
    "\047\011\050\015\051\023\052\027\053\031\054\007\055" +
    "\033\056\025\057\005\060\010\061\021\001\002\000\056" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\014\ufff3\031\ufff3\033\ufff3\034\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\001\002\000\056\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\014\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\001\002\000\052\004\016\006\020\007\012\010\026" +
    "\011\032\014\004\031\017\033\013\034\214\047\011\050" +
    "\015\051\023\052\027\053\031\054\007\055\033\056\025" +
    "\057\005\060\010\061\021\001\002\000\056\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0" +
    "\031\ufff0\033\ufff0\034\ufff0\047\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\001\002\000\026\014\004\022\052\031\053\043" +
    "\046\050\015\052\027\053\031\055\033\057\005\060\050" +
    "\001\002\000\012\027\074\030\077\032\217\044\075\001" +
    "\002\000\050\004\016\006\020\007\012\010\026\011\032" +
    "\014\004\031\017\033\013\047\011\050\015\051\023\052" +
    "\027\053\031\054\007\055\033\056\025\057\005\060\010" +
    "\061\021\001\002\000\056\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\031\ufffa\033\ufffa" +
    "\034\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002" +
    "\000\012\017\223\036\222\040\uffee\041\uffee\001\002\000" +
    "\004\053\225\001\002\000\022\014\004\031\017\050\015" +
    "\052\027\053\031\055\033\057\005\060\010\001\002\000" +
    "\016\013\041\014\042\015\044\016\043\040\uffec\041\uffec" +
    "\001\002\000\004\035\226\001\002\000\010\017\227\040" +
    "\uffed\041\uffed\001\002\000\004\033\140\001\002\000\006" +
    "\040\uffeb\041\uffeb\001\002\000\004\012\242\001\002\000" +
    "\022\014\004\031\017\050\015\052\027\053\031\055\033" +
    "\057\005\060\010\001\002\000\024\014\004\031\017\033" +
    "\140\050\015\052\027\053\031\055\033\057\005\060\010" +
    "\001\002\000\046\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020" +
    "\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\032\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\044" +
    "\uffdf\001\002\000\046\013\041\014\042\015\044\016\043" +
    "\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\001\002\000\014\013\041\014\042\015\044\016" +
    "\043\035\237\001\002\000\050\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\240\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd" +
    "\040\uffdd\041\uffdd\044\uffdd\001\002\000\022\014\004\031" +
    "\017\050\015\052\027\053\031\055\033\057\005\060\010" +
    "\001\002\000\046\013\041\014\042\015\044\016\043\020" +
    "\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\032\uffde\034\uffde\035\uffde\040\uffde\041\uffde\044" +
    "\uffde\001\002\000\046\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\032\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc" +
    "\044\uffdc\001\002\000\046\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\032\uffe4\034\uffe4\035\uffe4\040\uffe4\041" +
    "\uffe4\044\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\016\002\033\003\027\004\023\005\013\007" +
    "\021\010\005\001\001\000\004\005\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\212" +
    "\004\023\005\013\007\021\010\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\166" +
    "\010\053\001\001\000\012\004\160\005\013\007\021\010" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\135\005\013\007\021" +
    "\010\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\037\001\001\000\006\005\046\006\126\001\001\000" +
    "\002\001\001\000\004\005\125\001\001\000\004\005\124" +
    "\001\001\000\004\005\123\001\001\000\004\005\122\001" +
    "\001\000\006\005\046\006\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\046\006\104\001\001\000\010\005\055\006\054" +
    "\010\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\072\001\001\000\002\001\001" +
    "\000\004\005\071\001\001\000\004\005\070\001\001\000" +
    "\004\005\067\001\001\000\004\005\066\001\001\000\004" +
    "\005\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\046\006\101\001\001\000\006\005" +
    "\046\006\100\001\001\000\002\001\001\000\006\005\046" +
    "\006\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\107\001\001\000\012\004" +
    "\112\005\013\007\021\010\005\001\001\000\002\001\001" +
    "\000\012\004\111\005\013\007\021\010\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\116\006\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\131\001\001" +
    "\000\012\004\134\005\013\007\021\010\005\001\001\000" +
    "\002\001\001\000\012\004\133\005\013\007\021\010\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\141\011\142\012\140\001\001\000\004" +
    "\005\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\046\006\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\046\006\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\173\005\013\007\021\010\005" +
    "\001\001\000\002\001\001\000\012\004\175\005\013\007" +
    "\021\010\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\046\006\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\203\005\013\007\021\010\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\046\006\206\001\001\000\002\001\001\000\012\004\210" +
    "\005\013\007\021\010\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\135\005\013\007\021\010\005" +
    "\001\001\000\002\001\001\000\006\005\046\006\215\001" +
    "\001\000\002\001\001\000\012\004\217\005\013\007\021" +
    "\010\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\142\012" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\235\001\001\000\010\005\234\011\142\012\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // axioma ::= lista_de_sent 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST ls = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ls.ctd();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axioma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= axioma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_de_sent ::= sentencia 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST(null,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_de_sent ::= lista_de_sent sentencia 
            {
              AST RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST ls = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST(ls,s);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= expresion PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= IF AP condicion CP sentencia 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IF aux = new IF(c,s); RESULT = new IFELSE(aux, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= IF AP condicion CP sentencia ELSE sentencia 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST s1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IF aux = new IF(c,s1); 
			  								   RESULT = new IFELSE(aux,s2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= WHILE AP condicion CP sentencia 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WHILE(c,s);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= DO sentencia WHILE AP condicion CP PYC 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DOWHILE(s,c);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= FOR AP expresion PYC condicion PYC expresion CP sentencia 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST finW = new AST(s,e2);
			  										AST wh = new WHILE(c, finW);
			  										RESULT = new AST(e1, wh); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= FOR AP PYC condicion PYC expresion CP sentencia 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST finW = new AST(s,e2); 
			  								   AST wh = new WHILE(c, finW);
			  								   RESULT = new AST(null,wh); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= FOR AP expresion PYC condicion PYC CP sentencia 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST finW = new AST(s,null); 
			  								   AST wh = new WHILE(c, finW);
			  								   RESULT = new AST(e1,wh); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= FOR AP PYC condicion PYC CP sentencia 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST finW = new AST(s,null); 
			  						   AST wh = new WHILE(c, finW);
			  						   RESULT = new AST(null,wh); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= IF AP FORALL IDENTBOOL COMA condicion CP sentencia 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FORALL(i,c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= IF AP FORALL IDENTBOOL COMA FORALL IDENTBOOL COMA condicion CP sentencia 
            {
              AST RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FORALL(i1,i2,c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= PRINT AP expresion CP PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PRINT(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= PRINT AP arrayFinal CP PYC 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<AST> a = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PRINT(null,null,a);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= ALL lista_de_sent CLL 
            {
              AST RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST ls = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= declaracion PYC 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= tipo IDENT 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TIPO t = (TIPO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)!=null){ Generador.error(); }
						   TablaSimbolos.insertar(i,t); RESULT = new DEC(null,null,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= tipo IDENT AC ENTERO CC 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TIPO t = (TIPO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(TablaSimbolos.buscar(i)!=null){Generador.error();}
			  				     TablaSimbolos.insertar(i, new TIPO(TIPO.ARRAY,t,Integer.parseInt(e)));
			  				     RESULT = new DEC(null, null, t); Generador.asignacion("$"+i+"_length",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= tipo IDENT ASIG expresion 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TIPO t = (TIPO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)!=null){Generador.error();}
			  					TablaSimbolos.insertar(i,t); RESULT = new DEC(null, new ASIG(i,e),t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= tipo IDENT AC ENTERO CC ASIG arrayFinal 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TIPO t = (TIPO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AST> a = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)!=null){Generador.error();}
			  					TablaSimbolos.insertar(i, new TIPO(TIPO.ARRAY,t,Integer.parseInt(e)));
			  					RESULT = new DEC(null, new ARRAY(a,i),t); 
			  					Generador.asignacion("$"+i+"_length",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= declaracion COMA IDENT 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)!=null){Generador.error();}
			  				   TablaSimbolos.insertar(i,((EXP)d).getTipo()); 
			  				   RESULT = new DEC(d, null,((EXP)d).getTipo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= declaracion COMA IDENT ASIG expresion 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST d = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)!=null){Generador.error();}
			  				   		TablaSimbolos.insertar(i,((EXP)d).getTipo()); 
			  				   		RESULT = new DEC(d, new ASIG(i,e),((EXP)d).getTipo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MAS expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SUMA(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion MENOS expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RESTA(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion POR expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MULTI(e1, e2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion DIV expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DIV(e1,e2);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= MENOS expresion 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RESTA(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= AP expresion CP 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= AP tipo CP expresion 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TIPO t = (TIPO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CASTING(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)==null){Generador.error();} 
			  			   RESULT = new CONST(i, TablaSimbolos.buscar(i));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= IDENT ASIG expresion 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)==null){Generador.error();}
			  					   RESULT = new ASIG(i,e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= IDENT ASIG arrayFinal 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AST> a = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)==null){Generador.error();} 
			  					   RESULT = new ARRAY(a,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= IDENT AC expresion CC ASIG expresion 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i)==null){Generador.error();} 
			  					   	   RESULT = new ASIG(i,e,e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= IDENT AC expresion CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(TablaSimbolos.buscar(i)==null){Generador.error();} 
			  					   RESULT = new CONST(i,TablaSimbolos.buscar(i).getSubtipo(),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= IDENT PUNTO LENGTH 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CONST("$"+i+"_length", new TIPO(TIPO.INT)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= ENTERO 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CONST(e, new TIPO(TIPO.INT));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= REAL 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CONST(e, new TIPO(TIPO.FLOAT));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= CH 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CONST(e, new TIPO(TIPO.CHAR));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= STR 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new STRING(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= IDENTBOOL ASIG TRUE 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ASIG(i, new CONST("1",new TIPO(TIPO.BOOL))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= IDENTBOOL ASIG FALSE 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ASIG(i, new CONST("0",new TIPO(TIPO.BOOL))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= IDENTBOOL ASIG condicion 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASIGBOOL(i,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= IDENTBOOL ASIG expresion 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(TablaSimbolos.buscar(i) == null){ Generador.error();}
			  					   RESULT = new ASIG(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion IGUAL expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(5, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion NOIGUAL expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(6, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= expresion MENOR expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(1, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= expresion MENORIGUAL expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(2, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicion ::= expresion MAYOR expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(3, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicion ::= expresion MAYORIGUAL expresion 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(4, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicion ::= NOT condicion 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NOT(9, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= condicion AND condicion 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AND(7, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= condicion OR condicion 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OR(8, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= AP condicion CP 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= IDENTBOOL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new COND(5, new CONST("1", new TIPO(TIPO.INT)),
			  						   new CONST(i, new TIPO(TIPO.INT))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= condicion IMPLICA condicion 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OR(8, new NOT(9,c1),c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= FALSE IMPLICA TRUE 
            {
              AST RESULT =null;
		 RESULT = new COND(5, new CONST("1", new TIPO(TIPO.INT)),
			  						   new CONST("1", new TIPO(TIPO.INT))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= INT 
            {
              TIPO RESULT =null;
		 RESULT = new TIPO(TIPO.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= FLOAT 
            {
              TIPO RESULT =null;
		 RESULT = new TIPO(TIPO.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= CHAR 
            {
              TIPO RESULT =null;
		 RESULT = new TIPO(TIPO.CHAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= STRING 
            {
              TIPO RESULT =null;
		 RESULT = new TIPO(TIPO.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= BOOLEAN 
            {
              TIPO RESULT =null;
		 RESULT = new TIPO(TIPO.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arrayInicio ::= ALL expresion 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInicio",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arrayInicio ::= arrayInicio COMA expresion 
            {
              ArrayList<AST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<AST> a = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.addAll(a); RESULT.add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInicio",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arrayFinal ::= arrayInicio CLL 
            {
              ArrayList<AST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AST> a = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<AST>(); RESULT.addAll(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayFinal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
